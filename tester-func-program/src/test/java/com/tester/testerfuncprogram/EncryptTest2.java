package com.tester.testerfuncprogram;

import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Hex;
import org.junit.Test;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.security.Security;

public class EncryptTest2 {


    private byte[] getAesKey() throws UnsupportedEncodingException {
//        return "5d6s3a2e5r6f9d6f5d6s3a2e5r6f9d6f".getBytes("GBK");
        return Hex.decode("5d6s3a2e5r6f9d6f5d6s3a2e5r6f9d6f");
    }
    private byte[] getOffset(){
        // 偏移量为16位
        return Hex.decode("00000000000000000000000000000000");
    }
    private byte[] getMessage(){
        return "i hold the key.人交多少积分3827489*@&（&%（@）*".getBytes(Charset.forName("GBK"));
    }

    static {
        Security.addProvider(new BouncyCastleProvider());
    }
    @Test
    public void test_sap_encrypt() throws Exception {
        byte[] message = getMessage();
        System.out.println("message.length:" + message.length);

        // PKCS5Padding
        // PKCS7Padding
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");
        SecretKeySpec keySpec = new SecretKeySpec(getAesKey(), "AES");
        IvParameterSpec iv = new IvParameterSpec(getOffset());
        System.out.println("偏移量长度：iv.getIV().length:"+iv.getIV().length);
        cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);

        // 加密
        byte[] encrypted = cipher.doFinal(message);
        System.out.println("密文："+ new String(Hex.encode(encrypted),"GBK"));
    }
    @Test
    public void test_sap_decrypt() throws Exception {
        byte[] message = Hex.decode(getMsgFromSAP());
        // PKCS5Padding
        // PKCS7Padding
        Security.addProvider(new BouncyCastleProvider());
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");
        SecretKeySpec keySpec = new SecretKeySpec(getAesKey(), "AES");
        IvParameterSpec iv = new IvParameterSpec(getOffset());
        cipher.init(Cipher.DECRYPT_MODE, keySpec, iv);

        // 加密
        byte[] encrypted = cipher.doFinal(message);
        System.out.println(new String(encrypted,"GBK"));
    }
    private String getMsgFromSAP(){
        String res = "bd3d1ffeb985724e03ad4f4f10296d8a5e262bfa71b655175fe694b1838621aa7c3d81b71dca7b55464b6b7bc6d94dd2";
//        String res
        return res;
    }
}
